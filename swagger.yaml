openapi: 3.0.1
info:
  contact:
    email: info@kadena.io
    url: https://kadena.io
    name: Kadena LLC
  version: "1.0"
  title: Kadena Wallet Signing API
  license:
    name: BSD3
  description: |
    This API facilitates communication between dapps and wallets. This frees dapp developers from the complexity of managing private keys, allowing them to focus on the functionality and business logic of the application.
    Whenever the dapp needs to send a signed transaction, all you have to do is make an AJAX request to this API on localhost port 9467 and the user's wallet app will handle all the details of transaction signing for you.
servers:
- url: //localhost:9467/
paths:
  /v1/sign:
    post:
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/SigningRequest'
        required: true
      responses:
        "400":
          description: Invalid `body`
          content: {}
        "200":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/SigningResponse'
      x-codegen-request-body-name: body
  /v1/quicksign:
    post:
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/QuickSignRequest'
        required: true
      responses:
        "400":
          description: Invalid `body`
          content: {}
        "200":
          description: ""
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/QuickSignResponse'
      x-codegen-request-body-name: body
components:
  schemas:
    SigningResponse:
      required:
      - body
      - chainId
      type: object
      properties:
        body:
          $ref: '#/components/schemas/Command'
        chainId:
          $ref: '#/components/schemas/ChainId'
      description: wallet response that includes the signed transaction
    Command:
      required:
      - cmd
      - hash
      - sigs
      type: object
      properties:
        cmd:
          type: string
        sigs:
          type: array
          items:
            $ref: '#/components/schemas/UserSig'
        hash:
          $ref: '#/components/schemas/TypedHash'
      description: transaction command with stringified JSON payload (cmd)
    UserSig:
      required:
      - sig
      type: object
      properties:
        sig:
          type: string
      description: crypto signature by secret key of command payload
    TypedHash:
      maxLength: 32
      minLength: 32
      type: string
      description: blake2 hash in base64 of command payload
      format: base64url
    ChainId:
      type: string
      description: chainweb chain ID where the transaction will be executed
    SigningRequest:
      required:
      - caps
      - code
      type: object
      properties:
        code:
          type: string
        data:
          $ref: '#/components/schemas/Object'
        caps:
          type: array
          items:
            $ref: '#/components/schemas/DappCap'
        nonce:
          type: string
        chainId:
          $ref: '#/components/schemas/ChainId'
        gasLimit:
          $ref: '#/components/schemas/GasLimit'
        ttl:
          $ref: '#/components/schemas/TTLSeconds'
        sender:
          $ref: '#/components/schemas/AccountName'
        extraSigners:
          type: array
          items:
            $ref: '#/components/schemas/PublicKey'
      description: transaction information sent to the wallet for signing
    Object:
      type: object
      description: Arbitrary JSON object.
    DappCap:
      required:
      - cap
      - description
      - role
      type: object
      properties:
        role:
          type: string
        description:
          type: string
        cap:
          $ref: '#/components/schemas/SigCapability'
      description: a capability required by the transaction with amplifying information
        to help the user
    SigCapability:
      required:
      - args
      - name
      type: object
      properties:
        args:
          type: array
          items:
            type: string
        name:
          type: string
      description: a capability and any arguments it requires
      example:
        args:
        - arg1
        - arg2
        name: foo.bar
    GasLimit:
      type: number
      description: max number of gas units you want to spend on this transaction
    TTLSeconds:
      type: number
      description: number of seconds the transaction can wait in the mempool before
        expiring
    AccountName:
      type: string
      description: The name of an account in the coin contract. In the SigningRequest
        sender field, this will be the account used to pay the transaction's gas price.
    PublicKey:
      type: string
    QuickSignResponse:
      required:
      - results
      type: object
      properties:
        results:
          type: array
          items:
            required:
            - cmd
            - sigs
            type: object
            properties:
              sigs:
                type: array
                items:
                  type: array
                  items:
                    type: string
              cmd:
                type: string
      description: list of SigData
      example:
        results:
        - sigs:
          - - acbe76b30ccaf57e269a0cd5eeeb7293e7e84c7d68e6244a64c4adf4d2df6ea1
            - e103338c324190c0e86f06e2fdcc886df42562c5d74a2216c8b2cc729d255686ec5488693569da6afc57a02af5e4ec5bd013c24b4fcddd94cc94eb412e88a20d
          cmd: <cmd here>
    QuickSignRequest:
      required:
      - reqs
      type: object
      properties:
        reqs:
          type: array
          items:
            $ref: '#/components/schemas/CommandSigData'
      description: completed transaction bytes to be signed
    CommandSigData:
      required:
      - cmd
      - sigs
      type: object
      properties:
        sigs:
          type: array
          items:
            type: array
            items:
              type: string
              nullable: true
        cmd:
          type: string
      description: the signature data for a command
      example:
        sigs:
        - - ae18efd16cbd49e9a92552a2589ac01491b486fbcbb1e3f07980f945597e2033
          - a8b9ea0fbe6b8f59917908bbd2ec473af4ba30c62e2cbab9981f7f5f62941cbb79aee832efc38675fac42a658192ba7387bbbc61017b2ca9b2f2115bc1f4c503
        - - fa781bdd858cd2380b5e2b654e58035f7189a6e8158686a1bb7eabb585a56e7f
          - null
        cmd: '{"networkId":"testnet04","payload":{"exec":{"data":null,"code":"(+ 1
          2)"}},"signers":[{"pubKey":"ae18efd16cbd49e9a92552a2589ac01491b486fbcbb1e3f07980f945597e2033","clist":[{"args":[],"name":"coin.GAS"}]},{"pubKey":"fa781bdd858cd2380b5e2b654e58035f7189a6e8158686a1bb7eabb585a56e7f"}],"meta":{"creationTime":1663085494,"ttl":1800,"gasLimit":20,"chainId":"0","gasPrice":1.0e-6,"sender":"ae18efd16cbd49e9a92552a2589ac01491b486fbcbb1e3f07980f945597e2033"},"nonce":"2022-09-13
          16:11:34.678231 UTC"}'
