openapi: 3.1.0
info:
  contact:
    email: info@kadena.io
    url: https://kadena.io
    name: Kadena LLC
  version: "1.0"
  title: Kadena Wallet Signing API
  license:
    name: BSD3
  description: |
    This API facilitates communication between dapps and wallets. This frees dapp developers from the complexity of managing private keys, allowing them to focus on the functionality and business logic of the application.
    Whenever the dapp needs to send a signed transaction, all you have to do is make an AJAX request to this API on localhost port 9467 and the user's wallet app will handle all the details of transaction signing for you.

servers:
- url: //localhost:9467/

paths:
  /v1/sign:
    post:
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/SigningRequest'
        required: true
      responses:
        "400":
          description: Invalid `body`
          content: {}
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/SigningResponse'
          description: ""
      x-codegen-request-body-name: body

  /v1/quicksign:
    post:
      requestBody:
        content:
          application/json;charset=utf-8:
            schema:
              $ref: '#/components/schemas/QuicksignRequest'
        required: true
      responses:
        "400":
          description: Invalid `body`
          content: {}
        "200":
          content:
            application/json;charset=utf-8:
              schema:
                $ref: '#/components/schemas/QuicksignResponse'
          description: ""
      x-codegen-request-body-name: body

components:
  schemas:
    SigningResponse:
      description: wallet response that includes the signed transaction
      required:
      - body
      - chainId
      properties:
        body:
          $ref: '#/components/schemas/Command'
        chainId:
          $ref: '#/components/schemas/ChainId'
      type: object

    Command:
      description: transaction command with stringified JSON payload (cmd)
      required:
      - cmd
      - sigs
      - hash
      properties:
        cmd:
          type: string
        sigs:
          items:
            $ref: '#/components/schemas/QuicksignSignature'
          type: array
        hash:
          $ref: '#/components/schemas/Hash'
      type: object

    # UserSig:
    QuicksignSignature:
      description: crypto signature by secret key of command payload
      required:
      - sig
      properties:
        sig:
          type: string
      type: object

    # TypedHash:
    Hash:
      description: blake2 hash in base64 of command payload
      format: base64url
      type: string

    ChainId:
      description: chainweb chain ID where the transaction will be executed
      type: string

    SigningRequest:
      description: transaction information sent to the wallet for signing
      required:
      - code
      - caps
      properties:
        code:
          type: string
        data:
          $ref: '#/components/schemas/Object'
        caps:
          items:
            $ref: '#/components/schemas/CapabilityWithDescription'
          type: array
        nonce:
          type: string
        chainId:
          $ref: '#/components/schemas/ChainId'
        gasLimit:
          $ref: '#/components/schemas/GasLimit'
        ttl:
          $ref: '#/components/schemas/TTLSeconds'
        sender:
          $ref: '#/components/schemas/AccountName'
        extraSigners:
          items:
            $ref: '#/components/schemas/PublicKey'
          type: array
      type: object

    Object:
      description: Arbitrary JSON object.
      type: object

    # DappCap:
    CapabilityWithDescription:
      description:
        a capability required by the transaction with amplifying information to
        help the user
      required:
      - role
      - description
      - cap
      properties:
        role:
          type: string
        description:
          type: string
        cap:
          $ref: '#/components/schemas/Capability'
      type: object

    # SigCapability:
    Capability:
      description: a capability and any arguments it requires
      required:
      - name
      - args
      properties:
        name:
          minLength: 1
          # name needs to be in the form IDENTIFIER.IDENTIFIER[.IDENTIFIER]
          # Given a SYMBOL can be one of the following characters: %#+-_&$@<>=^?*!|/~
          # An IDENTIFIER is defined as (LETTER|SYMBOL)(LETTER|DIGIT|SYMBOL)*
          pattern: ^([a-zA-Z%#+\-_&$@<>=^?*!|\/~][a-zA-Z0-9%#+\-_&$@<>=^?*!|\/~]*)(\.[a-zA-Z%#+\-_&$@<>=^?*!|\/~][a-zA-Z0-9%#+\-_&$@<>=^?*!|\/~]*){1,2}$
          type: string
        args:
          items:
            type: string
          type: array
      example:
        name: foo.bar
        args:
        - arg1
        - arg2
      type: object

    GasLimit:
      description: max number of gas units you want to spend on this transaction
      type: number
      minimum: 0

    TTLSeconds:
      description:
        number of seconds the transaction can wait in the mempool before
        expiring
      type: number

    AccountName:
      description:
        The name of an account in the coin contract. In the SigningRequest
        sender field, this will be the account used to pay the transaction's gas
        price.
      type: string

    PublicKey:
      type: string

    # QSR_Response:
    Quicksign_Success:
      description: list of SigData
      required:
      - responses
      properties:
        responses:
          items:
            $ref: '#/components/schemas/QuicksignSuccessItem'
          type: array
      example:
        results:
        - sigs:
          - - acbe76b30ccaf57e269a0cd5eeeb7293e7e84c7d68e6244a64c4adf4d2df6ea1
            - e103338c324190c0e86f06e2fdcc886df42562c5d74a2216c8b2cc729d255686ec5488693569da6afc57a02af5e4ec5bd013c24b4fcddd94cc94eb412e88a20d
          cmd: <cmd here>
      type: object

    # CSDResponse:
    QuicksignSuccessItem:
      type: object
      required:
      - commandSigData
      - outcome
      properties:
        commandSigData:
          $ref: '#/components/schemas/CommandSigData'
        outcome:
          $ref: '#/components/schemas/SigningOutcome'

    SigningOutcome:
      discriminator:
        propertyName: result
      oneOf:
      - $ref: '#/components/schemas/SigningOutcome_Success'
      - $ref: '#/components/schemas/SigningOutcome_Failure'
      - $ref: '#/components/schemas/SigningOutcome_NoSig'

    # SO_Success:
    SigningOutcome_Success:
      type: object
      required:
      - result
      - hash
      properties:
        result:
          type: string
          enum:
          - success
        hash:
          type: string

    # SO_Failure:
    SigningOutcome_Failure:
      type: object
      required:
      - result
      - msg
      properties:
        result:
          type: string
          enum:
          - failure
        msg:
          type: string

    # SO_NoSig:
    SigningOutcome_NoSig:
      type: object
      required:
      - result
      properties:
        result:
          type: string
          enum:
          - noSig

    # QSR_Error:
    Quicksign_Error:
      required:
      - error
      properties:
        error:
          discriminator:
            propertyName: type
          oneOf:
          - $ref: '#/components/schemas/QuicksignError_Reject'
          - $ref: '#/components/schemas/QuicksignError_EmptyList'
          - $ref: '#/components/schemas/QuicksignError_Other'

    QuicksignError_Reject:
      type: object
      required:
      - type
      properties:
        type:
          type: string
          enum:
          - reject

    QuicksignError_EmptyList:
      type: object
      required:
      - type
      properties:
        type:
          type: string
          enum:
          - emptyList

    QuicksignError_Other:
      type: object
      required:
      - type
      - msg
      properties:
        type:
          type: string
          enum:
          - other
        msg:
          type: string

    QuicksignResponse:
      # This can either be a Quicksign_Error or a Quicksign_Success
      oneOf:
      - $ref: '#/components/schemas/Quicksign_Success'
      - $ref: '#/components/schemas/Quicksign_Error'

    QuicksignRequest:
      description: completed transaction bytes to be signed
      required:
      - cmdSigDatas
      properties:
        cmdSigDatas:
          items:
            $ref: '#/components/schemas/CommandSigData'
          type: array
      type: object

    CommandSigData:
      description: the signature data for a command
      required:
      - sigs
      - cmd
      properties:
        sigs:
          items:
            $ref: '#/components/schemas/CommandSigDataSignature'
          type: array
        cmd:
          type: string
      type: object

    # CSDSigner:
    CommandSigDataSignature:
      description: The signer and the signature
      required:
      - pubKey
      - sig
      properties:
        pubKey:
          minLength: 64
          maxLength: 64
          # needs to be hex characters only
          pattern: ^[0-9a-fA-F]{64}$
          type: string
        sig:
          type: string
          nullable: true
      type: object
